"
" Aniket's vim settings
"

call plug#begin()
Plug 'tomasiser/vim-code-dark'
Plug 'airblade/vim-gitgutter'
Plug 'ervandew/supertab'
Plug 'gregsexton/MatchTag'
Plug 'tomtom/tcomment_vim'
Plug 'bling/vim-airline'
Plug 'tpope/vim-abolish'
Plug 'mileszs/ack.vim'
Plug 'vim-airline/vim-airline-themes'
Plug 'groenewege/vim-less', { 'for': 'less' }
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug '2072/php-indenting-for-vim', { 'for': 'php' }
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'python-mode/python-mode', { 'for': 'python' }
Plug 'mmalecki/vim-node.js', { 'for': 'javascript' }
call plug#end()

set nocompatible

" Use UTF-8 as the default buffer encoding
set enc=utf-8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Remember up to 100 'colon' commmands and search patterns
set history=100

" Don't redraw while executing macros (good performance config)
set lazyredraw

" Reload files when changed on disk, i.e. via `git checkout`
set autoread

" Interface
set cursorline
set laststatus=2                                             " always show statusline
set showcmd
set list                                                     " show trailing whitespace
set listchars=tab:▸\ ,trail:▫
set number                                                   " show line numbers
set ruler                                                    " show where you are
set scrolloff=3                                              " show context above/below cursorline

" yank and paste with the system clipboard
set clipboard=unnamed

" Backups and shit
set nobackup
set nowritebackup
set noswapfile

" Text Formatting
set autoindent                                               " autoindent
set smartindent                                              " be smart about it
set shiftwidth=4                                             " normal mode indentation commands use 2 spaces
set shiftround                                               " use multiple of shiftwidth when indenting with '<' and '>'
set tabstop=4                                                " actual tabs occupy 8 characters
set softtabstop=4                                            " insert mode tab and backspace use 2 spaces
set backspace=2                                              " Fix broken backspace in some setups
set expandtab                                                " expand tabs to spaces

" Searching
set hlsearch                                                 " highlight search results
set ignorecase                                               " case-insensitive search
set incsearch                                                " search as you type
set smartcase                                                " case-sensitive search if any caps

" Tab completion
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmenu                                                 " show a navigable menu for tab completion
set wildmode=list:longest,full

" No sound. FTW.
set visualbell

" Color schemes
if &t_Co >= 256 || has("gui_running")
    colorscheme codedark
  highlight ColorColumn ctermbg=238
endif

if &t_Co > 2 || has("gui_running")
  " switch syntax highlighting on, when the terminal has colors
  syntax on
endif

" Colored column (to see line size violations)
set colorcolumn=80,120

" VimR specific
if has("gui_vimr")
    set termguicolors
    set title
endif

" ---------------------------------------------------------------------------
"  " Remap the tab key to do autocompletion or indentation depending on the
"  " context
"  "
"  --------------------------------------------------------------------------
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" keyboard shortcuts
let mapleader = ','
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
nnoremap <leader>g :GitGutterToggle<CR>
nnoremap <leader>t :tabnew<Space>
nnoremap <leader>% [mv%=<Space>
noremap <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
nnoremap + :s#\(\%(\<\l\+\)\%(_\)\@=\)\|_\(\l\)#\u\1\2#g
nnoremap _ f_x~

" bind L to grep word under cursor
nnoremap L :Ack! "\b<C-R><C-W>\b"<CR>:cw<CR>
nnoremap \ :Ack<SPACE>

autocmd VimResized * :wincmd =

" in case you forgot to sudo
cnoremap w!! %!sudo tee > /dev/null %

if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif

" ---------------------------------------------------------------------------
"  " Plugin configurations
"  "
"  --------------------------------------------------------------------------

" airline
let g:airline_theme = 'codedark'
let g:airline_left_sep = ''
let g:airline_right_sep = ''

" ---------------------------------------------------------------------------
"  " Filetype specific formatting
"  "
"  --------------------------------------------------------------------------

" gitcommit
autocmd Filetype gitcommit setlocal spell textwidth=72 colorcolumn=50,72

" markdown
autocmd Filetype markdown setlocal spell textwidth=80

" Go crazy!
if filereadable(expand("~/.vimrc.local"))
  " In your .vimrc.local, you might like:
  "
  " set autowrite
  " set nocursorline
  " set nowritebackup
  " set whichwrap+=<,>,h,l,[,] " Wrap arrow keys between lines
  "
  " autocmd! bufwritepost .vimrc source ~/.vimrc
  " noremap! jj <ESC>
  source ~/.vimrc.local
endif
